{"ast":null,"code":"import React, { useEffect, useState, useContext } from \"react\";\nimport { FirebaseContext } from \"../context/FirbaseContext\";\n\nfunction useContent(target) {\n  const [content, setContent] = useState([]);\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  useEffect(() => {\n    firebase.firestore().collection(target).get().then(snapshot => {\n      const allContent = snapshot.docs.map(contentObj => ({ ...contentObj.data(),\n        docId: contentObj.id\n      }));\n      setContent(allContent);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  }, []);\n  return {\n    [target]: content\n  };\n}\n\nexport default useContent;","map":{"version":3,"sources":["/Users/moon/clone/netflix-Clone/src/custom-hooks/useContent.js"],"names":["React","useEffect","useState","useContext","FirebaseContext","useContent","target","content","setContent","firebase","firestore","collection","get","then","snapshot","allContent","docs","map","contentObj","data","docId","id","catch","error","console","log","message"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeN,UAAU,CAACC,eAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CACLC,SADH,GAEGC,UAFH,CAEcL,MAFd,EAGGM,GAHH,GAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,YAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,UAAD,KAAiB,EACpD,GAAGA,UAAU,CAACC,IAAX,EADiD;AAEpDC,QAAAA,KAAK,EAAEF,UAAU,CAACG;AAFkC,OAAjB,CAAlB,CAAnB;AAKAb,MAAAA,UAAU,CAACO,UAAD,CAAV;AACD,KAXH,EAYGO,KAZH,CAYUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAO;AAAE,KAACpB,MAAD,GAAUC;AAAZ,GAAP;AACD;;AAED,eAAeF,UAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { FirebaseContext } from \"../context/FirbaseContext\";\n\nfunction useContent(target) {\n  const [content, setContent] = useState([]);\n  const { firebase } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(target)\n      .get()\n      .then((snapshot) => {\n        const allContent = snapshot.docs.map((contentObj) => ({\n          ...contentObj.data(),\n          docId: contentObj.id,\n        }));\n\n        setContent(allContent);\n      })\n      .catch((error) => {\n        console.log(error.message);\n      });\n  }, []);\n\n  return { [target]: content };\n}\n\nexport default useContent;\n"]},"metadata":{},"sourceType":"module"}